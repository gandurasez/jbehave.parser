/* Generated By:JavaCC: Do not edit this line. StoryParser.java */
package generated;

import java.io.File;
import java.io.FileReader;

public final class StoryParser implements StoryParserConstants {
    static final private int[] jj_la1 = new int[9];
    /**
     * Generated Token Manager.
     */
    static public StoryParserTokenManager token_source;
    /**
     * Current token.
     */
    static public Token token;
    /**
     * Next token.
     */
    static public Token jj_nt;
    static SimpleCharStream jj_input_stream;
    static private boolean jj_initialized_once = false;
    static private int jj_ntk;
    static private int jj_gen;
    static private int[] jj_la1_0;
    static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    static private int[] jj_expentry;
    static private int jj_kind = -1;

    static {
        jj_la1_init_0();
    }

    /**
     * Constructor with InputStream.
     */
    public StoryParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public StoryParser(java.io.InputStream stream, String encoding) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new StoryParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor.
     */
    public StoryParser(java.io.Reader stream) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new StoryParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor with generated Token Manager.
     */
    public StoryParser(StoryParserTokenManager tm) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    public static void parse(final File file) {

        FileReader reader = null;
        try {
            reader = new FileReader(file);
            new StoryParser(reader).parseStory(file.getName());
        } catch (Exception e) {
            throw new IllegalArgumentException("Unable to parse", e);
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (Exception ignored) {
                }
            }
        }
    }

    static final public void parseStory(final String fileName) throws ParseException {
        Token narrative;
        String storyDesc;
        Token scenarioName;
        boolean isStoryIgnored = false;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case META:
                Meta();
                break;
            default:
                jj_la1[0] = jj_gen;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case NARRATIVE:
                Narrative();
                break;
            default:
                jj_la1[1] = jj_gen;
        }
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SCENARIO:
                    break;
                default:
                    jj_la1[2] = jj_gen;
                    break label_1;
            }
            Scenario();
        }
    }

    static final private void Meta() throws ParseException {
        Token token;
        StringBuilder builder = new StringBuilder();
        jj_consume_token(META);
        label_2:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IN_META_ANY:
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    break label_2;
            }
            token = jj_consume_token(IN_META_ANY);
            builder.append(token.image);
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IN_META_NARRATIVE:
                jj_consume_token(IN_META_NARRATIVE);
                break;
            case IN_META_SCENARIO:
                jj_consume_token(IN_META_SCENARIO);
                break;
            case IN_META_COMMENT:
                jj_consume_token(IN_META_COMMENT);
                break;
            case 0:
                jj_consume_token(0);
                break;
            default:
                jj_la1[4] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        System.out.printf("Meta: [%s]\u005cn", builder.toString());
    }

    static final private void Narrative() throws ParseException {
        Token token;
        StringBuilder builder = new StringBuilder();
        jj_consume_token(NARRATIVE);
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IN_NARRATIVE_ANY:
                    break;
                default:
                    jj_la1[5] = jj_gen;
                    break label_3;
            }
            token = jj_consume_token(IN_NARRATIVE_ANY);
            builder.append(token.image);
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IN_NARRATIVE_META:
                jj_consume_token(IN_NARRATIVE_META);
                break;
            case IN_NARRATIVE_SCENARIO:
                jj_consume_token(IN_NARRATIVE_SCENARIO);
                break;
            case IN_NARRATIVE_COMMENT:
                jj_consume_token(IN_NARRATIVE_COMMENT);
                break;
            case 0:
                jj_consume_token(0);
                break;
            default:
                jj_la1[6] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        System.out.printf("Narrative: [%s]\u005cn", builder.toString());
    }

    static final private void Scenario() throws ParseException {
        Token token;
        StringBuilder builder = new StringBuilder();
        jj_consume_token(SCENARIO);
        label_4:
        while (true) {
            token = jj_consume_token(IN_SCENARIO_ANY);
            builder.append(token.image);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IN_SCENARIO_ANY:
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    break label_4;
            }
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IN_SCENARIO_META:
                jj_consume_token(IN_SCENARIO_META);
                break;
            case IN_SCENARIO_SCENARIO:
                jj_consume_token(IN_SCENARIO_SCENARIO);
                break;
            case IN_SCENARIO_COMMENT:
                jj_consume_token(IN_SCENARIO_COMMENT);
                break;
            case IN_SCENARIO_GIVEN:
                jj_consume_token(IN_SCENARIO_GIVEN);
                break;
            case 0:
                jj_consume_token(0);
                break;
            default:
                jj_la1[8] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        System.out.printf("Scenario: [%s]\u005cn", builder.toString());
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x2, 0x4, 0x8, 0x2000, 0x1601, 0x20000, 0x1c001, 0x10000000, 0xf000001,};
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        StoryParserTokenManager.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        StoryParserTokenManager.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

    static private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = StoryParserTokenManager.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    /**
     * Get the next Token.
     */
    static final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = StoryParserTokenManager.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    static final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = StoryParserTokenManager.getNextToken();
        }
        return t;
    }

    static private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = StoryParserTokenManager.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    /**
     * Generate ParseException.
     */
    static public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[29];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 9; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 29; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    static final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    static final public void disable_tracing() {
    }

    /**
     * Reinitialise.
     */
    public void ReInit(StoryParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    }

}

options {
    SANITY_CHECK=false;
    DEBUG_PARSER=false;
    IGNORE_CASE=true;
    DEBUG_TOKEN_MANAGER=true;
    STATIC=false;
    //USER_CHAR_STREAM=true;
    UNICODE_INPUT=true;
}

PARSER_BEGIN(StoryParser)

package generated;

import java.io.File;
import java.io.FileReader;
import java.util.*;

import model.Scenario;
import model.Story;

public final class StoryParser {
    public static Story parse(final File file) {

        FileReader reader = null;
        try {
            reader = new FileReader(file);
            return new StoryParser(reader).parseStory(file.getName());
        } catch(Exception e) {
            throw new IllegalArgumentException("Unable to parse", e);
        }
        finally
        {
            if( reader!=null )
            {
                try {
                    reader.close();
                }
                catch(Exception ignored){
                }
            }
        }
    }
}

PARSER_END(StoryParser)


TOKEN:
{
    <META               : "Meta:"       >   : IN_META
|   <NARRATIVE          : "Narrative:"  >   : IN_NARRATIVE
|   <SCENARIO           : "Scenario:"   >   : IN_SCENARIO
|   <GIVEN              : "Given"       >   : IN_GIVEN
}


<DEFAULT, IN_META>
SKIP:
{
    " "
|   "\t"
|   "\n"
|   "\r"
}

<IN_META>
TOKEN:
{
    <IN_META_NARRATIVE  : "Narrative:">
    {
        input_stream.backup(10);
    }   :   DEFAULT
    |
    <IN_META_SCENARIO  : "Scenario:">
    {
        input_stream.backup(9);
    }   :   DEFAULT
    |
    <IN_META_GIVEN  : "Given">
    {
    }   :   IN_GIVEN
    |
    <META_COMMENT    :   "!--"> : IN_META_COMMENT
    |
    <IGNORE : "@ignore">
    |
    <IN_META_ANY: ~[]>
}

<IN_NARRATIVE>
TOKEN:
{
    <IN_NARRATIVE_META  : "Meta:">
    {
        input_stream.backup(5);
    }   :   DEFAULT
    |
    <IN_NARRATIVE_SCENARIO  : "Scenario:">
    {
        input_stream.backup(9);
    }   :   DEFAULT
    |
    <NARRATIVE_COMMENT  : "!--">   :   IN_NARRATIVE_COMMENT
    |
    <IN_NARRATIVE_ANY: ~[]>
}


<IN_COMMENT>
SPECIAL_TOKEN:
{
    <COMMENT_END    : ["\r","\n"]>  : DEFAULT
}

<IN_NARRATIVE_COMMENT>
SPECIAL_TOKEN:
{
    <N_COMMENT_END    : ["\r","\n"]>  : IN_NARRATIVE
}

<IN_META_COMMENT>
SPECIAL_TOKEN:
{
    <M_COMMENT_END    : ["\r","\n"]>  : IN_META
}

<IN_SCENARIO_COMMENT>
TOKEN:
{
    <JIRA_ID    :   <PRPJECT_ID>"-"(<NUMBER>)+ >
    |
        <#PRPJECT_ID    :   "CPV">
        |
        <#NUMBER    :   ["0"-"9"]>
    |
    <IN_SCENARIO_COMMENT_ANY: ~["\r","\n"]>
}

<IN_SCENARIO_COMMENT>
SPECIAL_TOKEN:
{
    <IN_SCENARIO_COMMENT_END    : ["\r","\n"]>  : IN_SCENARIO
}

<IN_COMMENT,IN_NARRATIVE_COMMENT, IN_META_COMMENT> MORE:
{
    < ~[] >
}

MORE:
{
    "!--" : IN_COMMENT
}

<IN_GIVEN>
SPECIAL_TOKEN:
{
    <IN_GIVEN_META  : "Meta:">
    {
        input_stream.backup(5);
    }   :   DEFAULT
    |
    <IN_GIVEN_SCENARIO  : "Scenario:">
    {
        input_stream.backup(9);
    }   :   DEFAULT
}
<IN_GIVEN> SKIP:
{
    <~[]>
}


<IN_SCENARIO>
TOKEN:
{
    <IN_SCENARIO_META  : "Meta:">
    {
        input_stream.backup(5);
    }   :   DEFAULT
    |
    <IN_SCENARIO_SCENARIO  : "Scenario:">
    {
        input_stream.backup(9);
    }   :   DEFAULT
    |
    <SCENARIO_COMMENT  : ("!--")|("//")>
    {
    }   :   IN_SCENARIO_COMMENT
    |
    <IN_SCENARIO_GIVEN  : "Given">
    {
    }   :   IN_GIVEN
    |
    <IN_SCENARIO_ANY: ~["\r","\n"]>
}

<IN_SCENARIO> SPECIAL_TOKEN:
{
    "\n"|"\r"   : DEFAULT
}


public Story parseStory( final String fileName) :
{
    Token narrative;
    String storyDesc = "";
    Token scenarioName;

    final Collection<Scenario> scenarios = new ArrayList();
    boolean isStoryIgnored = false;
}
{
    [Meta()]

    [{storyDesc = Narrative(); }]

    (Scenario( scenarios ))*

    [<EOF>]

    { return new Story(storyDesc, scenarios); }
}


private boolean Meta():
{
    Token token;
    boolean isIgnored = false;
}
{
    <META>
    (
        <META_COMMENT>
        |
        (
            <IGNORE>
            { isIgnored = true; }
        )
        |
        <IN_META_ANY>
    )*

    (<IN_META_NARRATIVE>|<IN_META_SCENARIO>|<IN_META_GIVEN>|<EOF>)

    {
        System.out.printf("Meta: [ignored - %s]\n", isIgnored);
        return isIgnored;
    }
}

private String Narrative():
{
    Token token;
    StringBuilder builder = new StringBuilder();
}
{
    <NARRATIVE>
    (
        <NARRATIVE_COMMENT>
        |
        (
        token = <IN_NARRATIVE_ANY>
        { builder.append(token.image); })
    )*

    (<IN_NARRATIVE_META>|<IN_NARRATIVE_SCENARIO>|<EOF>)

    {
        System.out.printf("Narrative: [%s]\n", builder.toString());
        return builder.toString();
    }
}

private void Scenario( final Collection<Scenario> scenarios ):
{
    Token token;
    final StringBuilder builder = new StringBuilder();
    final Set<String> relatedJiras = new LinkedHashSet();
    boolean isIgnored = false;
}
{
    <SCENARIO>
    (
        token = <IN_SCENARIO_ANY>
        { builder.append(token.image); }
    )+


    ( ScenarioComment(relatedJiras) )*

    (
        (<IN_SCENARIO_META>{ isIgnored = Meta(); })
        |
        <IN_SCENARIO_SCENARIO>
        |
        <IN_SCENARIO_GIVEN>
        |
        <EOF>
    )

    {
        System.out.printf("Scenario: [%s]\n", builder.toString());
        if(isIgnored)
        {
            scenarios.add(new Scenario(builder.toString(),relatedJiras, isIgnored ));
        }
    }
}

private void ScenarioComment( final Set<String> relatedJiras ):
{
    Token token;
}
{
    <SCENARIO_COMMENT>
    ((
        token = <JIRA_ID>
        { relatedJiras.add(token.image); }
    )
    |
    <IN_SCENARIO_COMMENT_ANY>)*
}



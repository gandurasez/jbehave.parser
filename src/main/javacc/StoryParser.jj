options {
    SANITY_CHECK=false;
    DEBUG_PARSER=false;
    IGNORE_CASE=true;
    DEBUG_TOKEN_MANAGER=true;
    STATIC=true;
    //USER_CHAR_STREAM=true;
    UNICODE_INPUT=true;
}

PARSER_BEGIN(StoryParser)

package generated;

import java.io.File;
import java.io.FileReader;
import java.util.*;

public final class StoryParser {
    public static void parse(final File file) {

        FileReader reader = null;
        try {
            reader = new FileReader(file);
            new StoryParser(reader).parseStory(file.getName());
        } catch(Exception e) {
            throw new IllegalArgumentException("Unable to parse", e);
        }
        finally
        {
            if( reader!=null )
            {
                try {
                    reader.close();
                }
                catch(Exception ignored){
                }
            }
        }
    }
}

PARSER_END(StoryParser)


TOKEN:
{
    <META               : "Meta:"                > : IN_META
 |  <NARRATIVE             : "Narrative:"    >  : IN_NARRATIVE
 |  <SCENARIO             : "Scenario:"    >    :   IN_SCENARIO
 |  <GIVEN             : "Given"    >   :   IN_GIVEN
}


<DEFAULT>
SKIP:
{
    " "
|   "\t"
|   "\n"
|   "\r"
}

<IN_META>
TOKEN:
{
    <IN_META_NARRATIVE  : "Narrative:">
    {
        input_stream.backup(10);
    }   :   DEFAULT
    |
    <IN_META_SCENARIO  : "Scenario:">
    {
        input_stream.backup(9);
    }   :   DEFAULT
    |
    <IN_META_GIVEN  : "Given">
            {
                input_stream.backup(5);
            }   :   DEFAULT
        |
    <IN_META_COMMENT    :   "!--"> : IN_COMMENT
    |
    <IN_META_ANY: ~[]>
}

<IN_NARRATIVE>
TOKEN:
{
    <IN_NARRATIVE_META  : "Meta:">
    {
        input_stream.backup(5);
    }   :   DEFAULT
    |
    <IN_NARRATIVE_SCENARIO  : "Scenario:">
        {
            input_stream.backup(9);
        }   :   DEFAULT
    |
    <IN_NARRATIVE_COMMENT  : "!--">
            {
            }   :   IN_COMMENT
        |
    <IN_NARRATIVE_ANY: ~[]>
}


<IN_COMMENT>
SPECIAL_TOKEN:
{
    <COMMENT_END    : ["\r","\n"]>  : DEFAULT
}

<IN_COMMENT> MORE:
{
    < ~[] >
}

MORE:
{
    "!--" { /*input_stream.backup(3);*/ } : IN_COMMENT
}

<IN_GIVEN>
SPECIAL_TOKEN:
{
        <IN_GIVEN_META  : "Meta:">
        {
            input_stream.backup(5);
        }   :   DEFAULT
        |
        <IN_GIVEN_SCENARIO  : "Scenario:">
            {
                input_stream.backup(9);
            }   :   DEFAULT
        |
        <IN_GIVEN_ANY: ~[]>
}


<IN_SCENARIO>
TOKEN:
{

        <IN_SCENARIO_META  : "Meta:">
        {
            input_stream.backup(5);
        }   :   DEFAULT
        |
        <IN_SCENARIO_SCENARIO  : "Scenario:">
            {
                input_stream.backup(9);
            }   :   DEFAULT
            |
        <IN_SCENARIO_COMMENT  : "!--">
                    {
                    }   :   IN_COMMENT
                    |
        <IN_SCENARIO_GIVEN  : "Given">
                    {
                    }   :   IN_GIVEN
                    |
        <IN_SCENARIO_ANY: ~[]>
}



public void parseStory( final String fileName) :
{
    Token narrative;
    String storyDesc;
    Token scenarioName;
    boolean isStoryIgnored = false;
}
{
    [Meta()]

    [Narrative()]

    (Scenario())*

}


private void Meta():
{
    Token token;
    StringBuilder builder = new StringBuilder();
}
{
    <META>
        (
            token = <IN_META_ANY>
            { builder.append(token.image); }
        )*
    (<IN_META_NARRATIVE>|<IN_META_SCENARIO>|<IN_META_COMMENT>|<EOF>)

    {System.out.printf("Meta: [%s]\n", builder.toString());}
}

private void Narrative():
{
    Token token;
    StringBuilder builder = new StringBuilder();
}
{
    <NARRATIVE>
        (
            token = <IN_NARRATIVE_ANY>
            { builder.append(token.image); }
        )*
    (<IN_NARRATIVE_META>|<IN_NARRATIVE_SCENARIO>|<IN_NARRATIVE_COMMENT>|<EOF>)

    {System.out.printf("Narrative: [%s]\n", builder.toString());}
}

private void Scenario():
{
    Token token;
    StringBuilder builder = new StringBuilder();
}
{
    <SCENARIO>
        (
            token = <IN_SCENARIO_ANY>
            { builder.append(token.image); }
        )+

    (<IN_SCENARIO_META>|<IN_SCENARIO_SCENARIO>|<IN_SCENARIO_COMMENT>|<IN_SCENARIO_GIVEN>|<EOF>)

    {System.out.printf("Scenario: [%s]\n", builder.toString());}
}


